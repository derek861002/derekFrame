<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
  <display-name>derekFrame</display-name>
  <!-- 读取spring配置文件-->
  <!-- 使用ContextLoaderListener配置时，需要告诉它Spring配置文件的位置 -->
  <!-- 如果没有指定，上下文载入器会在/WEB-INF/applicationContext.xml中找Spring配置文件 -->
  <!-- 我们可以通过在Servlet上下文中设置contextConfigLocation参数，来为上下文载入器指定一个或多个Spring配置文件 -->
  <!-- 注意：contextConfigLocation参数是一个用逗号分隔的路径列表，其路径是相对于Web系统的根路径的 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
      classpath:config/spring/applicationContext-*.xml;
    </param-value>
  </context-param>

  <!--设置路径变量值-->
  <context-param>
    <param-name>webAppRootKey</param-name>
    <param-value>webapp.root</param-value>
  </context-param>

  <!--日志记录-->
  <context-param>
    <description>日志记录</description>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:config/system/log4j.properties</param-value>
  </context-param>

  <!--开一条watchdog线程每60秒扫描一下配置文件的变化-->
  <context-param>
    <description>日志页面的刷新间隔</description>
    <param-name>log4jRefreshinterval</param-name>
    <param-value>60000</param-value>
  </context-param>

  <!--字符集过滤器,只支持post提交的数据，如果是get提交的数据乱码，需要配置tomcat或手动处理-->
  <filter>
    <filter-name>SpringEncodingFilter</filter-name>
    <filter-class>
      org.springframework.web.filter.CharacterEncodingFilter
    </filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>SpringEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>

  <!-- 配置上下文载入器 -->
  <!-- 上下文载入器载入除DispatcherServlet载入的配置文件之外的其它上下文配置文件 -->
  <!-- 最常用的上下文载入器是一个Servlet监听器，其名称为ContextLoaderListener -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--防止spring内存溢出监听器-->
  <listener>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  </listener>

  <!--springMVC核配置-->
  <!-- SpringMVC的前端控制器 -->
  <!-- 当DispatcherServlet载入后，它将从一个XML文件中载入Spring的应用上下文，该XML文件的名字取决于<com.bmft.egps.servlet-name> -->
  <!-- 这里DispatcherServlet将试图从一个叫做springmvc-com.bmft.egps.servlet.xml的文件中载入应用上下文，其默认位于WEB-INF目录下 -->
  <!-- 所以ContextLoaderListener参数值也可写成<param-value>classpath:applicationContext-*.xml</param-value> -->
  <servlet>
    <servlet-name>SpringMVC</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--contextConfigLocation配置springmvc加载的配置文件（配置处理器映射器，适配器...）
      如果不配置contextConfigLocation，默认加载的是/WEB-INF/servlet名称-com.bmft.egps.servlet.xml（springmvc-com.bmft.egps.servlet.xml）
    -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:config/spring/springMVC.xml</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>SpringMVC</servlet-name>
    <!--
      第一种:*.action,访问以.action结尾的请求由DispatcherServlet进行解析
      第二种:/,所以访问的地址都由DispatcherServlet进行解析,对于静态文件的解析需要配置不让DispatcherServlet进行解析，
            使用这种方式可以实现RESTful风格的url
      第三种:/*,这样配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp地址，
            不能根据jsp页面找到handler,会报错
      -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>SpringMVC</servlet-name>
    <url-pattern>*.ico</url-pattern>
  </servlet-mapping>

  <!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->
  <!-- 这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/> -->
  <!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->
  <!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->
  <filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 -->
      <param-name>targetFilterLifecycle</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!--设置session超时时间-->
  <session-config>
    <session-timeout>30</session-timeout>
  </session-config>

  <!-- 连接池 启用Web监控统计功能   start-->
  <filter>
    <filter-name>DruidWebStatFilter</filter-name>
    <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
    <init-param>
      <param-name>exclusions</param-name>
      <param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>DruidWebStatFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <servlet>
    <servlet-name>DruidStatView</servlet-name>
    <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>DruidStatView</servlet-name>
    <url-pattern>/druid/*</url-pattern>
  </servlet-mapping>
  <!-- 连接池 启用Web监控统计功能   end-->



  <!-- <error-page>
     <exception-type>java.lang.Throwable</exception-type>
     <location>/WEB-INF/views/admin/error/500.jsp</location>
   </error-page>
   <error-page>
     <error-code>500</error-code>
     <location>/WEB-INF/views/admin/error/500.jsp</location>
   </error-page>-->
  <!--<error-page>
    <error-code>404</error-code>
    <location>/WEB-INF/views/error/404.jsp</location>
  </error-page>-->

  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>

</web-app>
