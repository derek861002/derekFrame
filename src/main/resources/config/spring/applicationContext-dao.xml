<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd">
    <description>dao Configuration</description>

    <!--引入jdbc配置文件,jdbc.properties文件中的Key全名要有一定的特殊规则-->
    <context:property-placeholder location="classpath:config/other/jdbc.properties" file-encoding="UTF-8"/>

    <!-- 配置数据源，这里用阿里的druid连接池 -->
    <bean id="dataSource"
          class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init"
          destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc_driverClassName}"/>
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_username}"/>
        <property name="password" value="${jdbc_password}"/>
        <property name="dbType" value="${jdbc_dbType}"/>
        <!--初始化连接数量-->
        <property name="initialSize" value="${druid_initialSize}"/>
        <!--最大并发连接数-->
        <property name="maxActive" value="${druid_maxActive}"/>
        <!--连接池最大空闲-->
        <!--<property name="maxIdle" value="20"/>&lt;!&ndash;这里默认是8&ndash;&gt;-->
        <!--最小空闲连接数-->
        <property name="minIdle" value="${druid_minIdle}"/>
        <!--配置获取连接等待超时的时间-->
        <property name="maxWait" value="${druid_maxWait}"/>
        <!--用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${validationQuery}"/>
        <!--配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒-->
        <property name="timeBetweenEvictionRunsMillis" value="${druid_timeBetweenEvictionRunsMillis}"/>
        <!--配置一个连接在池中最小生存的时间，单位是毫秒-->
        <property name="minEvictableIdleTimeMillis" value="${druid_minEvictableIdleTimeMillis}"/>
        <!--打开removeAbandoned功能 自动清除无用连接 超过时间限制是否回收-->
        <property name="removeAbandoned" value="${druid_removeAbandoned}"/>
        <!--180秒，也就是3分钟 清除无用连接的等待时间-->
        <property name="removeAbandonedTimeout" value="${druid_removeAbandonedTimeout}"/>
        <!--关闭abanded连接时输出错误日志-->
        <property name="logAbandoned" value="${druid_logAbandoned}"/>
        <!-- 连接属性 -->
        <property name="connectionProperties">
            <value>${druid_connectionProperties}</value>
        </property>
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="${druid_testWhileIdle}" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${druid_testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${druid_testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid_poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid_maxPoolPreparedStatementPerConnectionSize}" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
                监控统计用的filter:stat
                日志用的filter:log4j
               防御SQL注入的filter:wall -->
        <property name="filters" value="${druid_filters}" />
    </bean>

    <!--myBatis文件配置，扫描所有mapper文件-->
    <!--configLocation为mybatis属性 mapperLocations为所有mapper
        dataSource-ref：引用上面配置的数据库
        configLocation：加载mybatis全局配置文件
        mapperLocations：扫描mapper文件，注意这里的maaper文件的namespace必须要和mapper(mapper)类全限定名一样
    -->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean"
          p:dataSource-ref="dataSource"
          p:configLocation="${mybatis_configLocation}"
          p:mapperLocations="classpath:mappings/**/*.xml"/>

    <!--spring与mybatis整合配置，扫描所有mapper(mapper)-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:basePackage="org.derekframe.modules.*.mapper"
          p:sqlSessionFactoryBeanName="sqlSessionFactory"/>

    <!--spring与mybatis 通用mapper整合配置，扫描所有mapper(dao)
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.dsyc.modules.*.mapper"/>

        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
            </value>
        </property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    -->
</beans>